using System;
using System.Collections.Generic;
using System.Collections.Immutable;

namespace KafkaClient.Protocol
{
    /// <summary>
    /// RecordBatch => FirstOffset Length PartitionLeaderEpoch Magic CRC Attributes LastOffsetDelta FirstTimestamp MaxTimestamp ProducerId ProducerEpoch FirstSequence [Record]
    /// </summary>
    /// <remarks>
    /// Version 2+:
    /// RecordBatch => FirstOffset Length PartitionLeaderEpoch Magic CRC Attributes LastOffsetDelta FirstTimestamp MaxTimestamp ProducerId ProducerEpoch FirstSequence [Record]
    ///   FirstOffset => int64
    ///   Length => int32
    ///   PartitionLeaderEpoch => int32
    ///   Magic => int8 
    ///   CRC => int32
    ///   Attributes => int16
    ///   LastOffsetDelta => int32
    ///   FirstTimestamp => int64
    ///   MaxTimestamp => int64
    ///   ProducerId => int64
    ///   ProducerEpoch => int16
    ///   FirstSequence => int32
    ///   Records => [Record]
    /// 
    /// PartitionLeaderEpoch is set by the broker upon receipt of a produce request and is used to ensure no loss of data when there are leader changes with log truncation. 
    ///   Client developers do not need to worry about setting this value.
    /// 
    /// Version 0-1:
    /// MessageSet => [Offset MessageSize Message]
    ///   Offset => int64
    ///   MessageSize => int32
    /// 
    /// MessageSets are not preceded by an int32 like other array elements in the protocol.
    /// From https://cwiki.apache.org/confluence/display/KAFKA/A+Guide+To+The+Kafka+Protocol#AGuideToTheKafkaProtocol-Messagesets
    /// </remarks>
    public class MessageBatch
    {
        public MessageBatch(IEnumerable<Message> messages, MessageCodec codec = MessageCodec.None, long offset = 0L, long producerId = 0L, short producerEpoch = 0, int sequence = 0)
        {
            Messages = messages.ToImmutableList();
        }

        /// <summary>
        /// Denotes the first offset in the RecordBatch. The 'offsetDelta' of each Record in the batch would be be computed relative to this FirstOffset. 
        /// In particular, the offset of each Record in the Batch is its 'OffsetDelta' + 'FirstOffset'.
        /// </summary>
        public long FirstOffset { get; }

        /// <summary>
        /// The lowest 3 bits contain the compression codec used for the message.
        /// 
        /// The fourth lowest bit represents the timestamp type. 0 stands for CreateTime and 1 stands for LogAppendTime. The producer should always set this bit to 0. (since 0.10.0)
        /// 
        /// The fifth lowest bit indicates whether the RecordBatch is part of a transaction or not. 0 indicates that the RecordBatch is not transactional, while 1 indicates that it is. (since 0.11.0.0)
        /// 
        /// The sixth lowest bit indicates whether the RecordBatch includes a control message. 1 indicates that the RecordBatch is contains a control message, 0 indicates that it doesn't. 
        /// Control messages are used to enable transactions in Kafka and are generated by the broker. Clients should not return control batches (ie. those with this bit set) to applications. (since 0.11.0.0)
        /// 
        /// All other bits should be set to 0.
        /// </summary>
        public byte Attributes { get; }

        /// <summary>
        ///  The lowest 2 bits contain the compression codec used for the message. The other bits should be set to 0.
        /// </summary>
        public const byte CodecMask = 0x3;

        /// <summary>
        /// The timestamp of the first Record in the batch. The timestamp of each Record in the RecordBatch is its 'TimestampDelta' + 'FirstTimestamp'.
        /// </summary>
        public DateTimeOffset? FirstTimestamp { get; }

        /// <summary>
        ///  The broker assigned producerId received by the 'InitProducerId' request. Clients which want to support idempotent message delivery and transactions must set this field.
        /// </summary>
        public long ProducerId { get; }

        /// <summary>
        /// The broker assigned producerEpoch received by the 'InitProducerId' request. Clients which want to support idempotent message delivery and transactions must set this field.
        /// </summary>
        public short ProducerEpoch { get; }

        /// <summary>
        /// The producer assigned sequence number which is used by the broker to deduplicate messages. Clients which want to support idempotent message delivery and transactions must set this field. 
        /// The sequence number for each Record in the RecordBatch is its OffsetDelta + FirstSequence.
        /// </summary>
        public int FirstSequence { get; }

        public IImmutableList<Message> Messages { get; }

    }
}